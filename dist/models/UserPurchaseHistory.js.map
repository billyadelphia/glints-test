{"version":3,"file":"UserPurchaseHistory.js","sourceRoot":"","sources":["../../src/models/UserPurchaseHistory.ts"],"names":[],"mappings":";;;;AAAA,mDAA4C;AAC5C,+DAAmI;AAInI,IAAM,mBAAmB,GAAzB,MAAM,mBAAoB,SAAQ,4BAA0B;CA6E3D,CAAA;AAzEC;IAHC,iCAAU;IACV,oCAAa;IACb,6BAAM;;+CACK;AAkBZ;IAhBC,6BAAM,CAAC;QACN,IAAI,EAAE,+BAAQ,CAAC,MAAM;QACrB,QAAQ,EAAE;YACR,QAAQ,EAAE,IAAI;SAUf;QACD,SAAS,EAAE,KAAK;KACjB,CAAC;;mDACc;AAUhB;IARC,6BAAM,CAAC;QACN,IAAI,EAAE,+BAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;QAC7B,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACR,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE,IAAI;SACX;KACF,CAAC;;8DACyB;AAkB3B;IAhBC,6BAAM,CAAC;QACN,IAAI,EAAE,+BAAQ,CAAC,MAAM;QACrB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACR,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE,IAAI;SASX;KACF,CAAC;;qDACgB;AAkBlB;IAhBC,6BAAM,CAAC;QACN,IAAI,EAAE,+BAAQ,CAAC,MAAM;QACrB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACR,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE,IAAI;SASX;KACF,CAAC;;2DACsB;AAIxB;IAFC,gCAAS;IACT,6BAAM;sCACK,IAAI;sDAAC;AAIjB;IAFC,gCAAS;IACT,6BAAM;sCACK,IAAI;sDAAC;AA5Eb,mBAAmB;IADxB,4BAAK,CAAC,EAAC,SAAS,EAAE,uBAAuB,EAAC,CAAC;GACtC,mBAAmB,CA6ExB;AAEY,QAAA,wBAAwB,GAAG,mBAAmB,CAAC;AAC5D,mBAAS,CAAC,SAAS,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;AAE3C,kBAAe,mBAAmB,CAAC","sourcesContent":["import sequelize from \"../config/sequelize\";\nimport {Table, Column, Model, DataType, CreatedAt, UpdatedAt, PrimaryKey, AutoIncrement, BeforeCreate} from \"sequelize-typescript\";\nimport Restaurant from \"./Restaurant\";\nimport RestaurantMenu from \"./RestaurantMenu\";\n@Table({tableName: \"UserPurchaseHistories\"})\nclass UserPurchaseHistory extends Model<UserPurchaseHistory> {\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  id!: number;\n\n  @Column({\n    type: DataType.BIGINT,\n    validate: {\n      notEmpty: true,\n      // async checkUser(value: string | undefined) {\n      //   if (value) {\n      //     const userModel = require(\"./User\").default;\n      //     const user = await userModel.findOne({attributes: [\"id\"], where: {id: value}});\n      //     if (!user) {\n      //       throw new Error(\"User not found !\");\n      //     }\n      //   }\n      // },\n    },\n    allowNull: false,\n  })\n  userId!: number;\n\n  @Column({\n    type: DataType.DECIMAL(16, 2),\n    allowNull: false,\n    validate: {\n      notEmpty: true,\n      trim: true,\n    },\n  })\n  transactionAmount!: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    validate: {\n      notEmpty: true,\n      trim: true,\n      // async checkDishname(value: string | undefined) {\n      //   if (value) {\n      //     const dish = await RestaurantMenu.findOne({attributes: [\"id\"], where: {dishName: value}});\n      //     if (!dish) {\n      //       throw new Error(\"Dish name not found!\");\n      //     }\n      //   }\n      // },\n    },\n  })\n  dishName!: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    validate: {\n      notEmpty: true,\n      trim: true,\n      // async checkRestaurantName(value: string | undefined) {\n      //   if (value) {\n      //     const resto = await Restaurant.findOne({attributes: [\"id\"], where: {restaurantName: value}});\n      //     if (!resto) {\n      //       throw new Error(\"Restaurant not found!\");\n      //     }\n      //   }\n      // },\n    },\n  })\n  restaurantName!: string;\n\n  @CreatedAt\n  @Column\n  createdAt!: Date;\n\n  @UpdatedAt\n  @Column\n  updatedAt!: Date;\n}\n\nexport const userPurchaseHistoryModel = UserPurchaseHistory;\nsequelize.addModels([UserPurchaseHistory]);\n\nexport default UserPurchaseHistory;\n"]}