{"version":3,"file":"Server.js","sourceRoot":"","sources":["../src/Server.ts"],"names":[],"mappings":";;;;AAAA,2BAA2B;AAC3B,iCAAiC;AACjC,qBAAmB;AACnB,yCAAuF;AACvF,0CAA0C;AAC1C,wCAAwC;AACxC,8CAA8C;AAC9C,kDAAkD;AAClD,6BAA6B;AAC7B,+CAA+C;AAE/C,+CAA0F;AAE1F,MAAM,OAAO,GAAG,SAAS,CAAC;AAC1B,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAEnC,8DAA8D;AAC9D,mCAAmC;AACnC,6DAA6D;AAC7D,qBAAqB;AACrB,2DAA2D;AAC3D,kGAAkG;AAClG,aAAa;AACb,sEAAsE;AACtE,MAAM;AACN,uFAAuF;AACvF,KAAK;AA0BL,IAAa,MAAM,GAAnB,MAAa,MAAO,SAAQ,qBAAY;IACtC,iBAAiB;QACf,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;aACb,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;aACxB,GAAG,CAAC,oCAA2B,CAAC;aAChC,GAAG,CAAC,YAAY,EAAE,CAAC;aACnB,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;aACjB,GAAG,CAAC,cAAc,EAAE,CAAC;aACrB,GAAG,CACF,UAAU,CAAC,IAAI,CAAC;YACd,4BAA4B;YAC5B,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;gBACxB,GAAW,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,sEAAsE;YACrG,CAAC;SACF,CAAC,CACH;aACA,GAAG,CACF,UAAU,CAAC,UAAU,CAAC;YACpB,QAAQ,EAAE,IAAI;SACf,CAAC,CACH,CAAC;QAEJ,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAxBY,MAAM;IAzBlB,uBAAc,CAAC;QACd,OAAO;QACP,WAAW,EAAE,CAAC,kBAAkB,CAAC;QACjC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,IAAI;QAClC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa;QAC1C,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,KAAK;QAC1C,MAAM,EAAE;YACN,KAAK,EAAE,IAAI;YACX,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,IAAI;SAEb;QACD,cAAc,EAAE,CAAC,GAAG,OAAO,iBAAiB,EAAE,GAAG,OAAO,cAAc,EAAE,GAAG,OAAO,mBAAmB,EAAE,GAAG,OAAO,mBAAmB,CAAC;QACrI,KAAK,EAAE;YACL,SAAS,EAAE,CAAC,kCAAoB,EAAE,4BAAc,EAAE,mCAAqB,CAAC;SACzE;QACD,OAAO,EAAE,CAAC,cAAc,CAAC;QACzB,MAAM,EAAE;YACN,IAAI,EAAE,GAAG,YAAY,cAAc;YACnC,MAAM,EAAE;YACN,iBAAiB;aAClB;SACF;KACF,CAAC;GACW,MAAM,CAwBlB;AAxBY,wBAAM","sourcesContent":["// import \"@tsed/passport\";\n// import \"@tsed/multipartfiles\";\nimport \"@tsed/ajv\";\nimport {GlobalAcceptMimesMiddleware, ServerLoader, ServerSettings} from \"@tsed/common\";\nimport * as bodyParser from \"body-parser\";\nimport * as compress from \"compression\";\nimport * as cookieParser from \"cookie-parser\";\nimport * as methodOverride from \"method-override\";\nimport * as cors from \"cors\";\nimport * as userAgent from \"express-useragent\";\n\nimport {RestaurantController, UserController, TransactionController} from \"./controllers\";\n\nconst rootDir = __dirname;\nconst superRootDir = process.cwd();\n\n// const whitelistList = process.env.ALLOWED_CORS?.split(\",\");\n// const whitelist = whitelistList;\n// const corsOptionsDelegate = (req: any, callback: any) => {\n//   let corsOptions;\n//   if (whitelist?.indexOf(req.header(\"Origin\")) !== -1) {\n//     corsOptions = {origin: true}; // reflect (enable) the requested origin in the CORS response\n//   } else {\n//     corsOptions = {origin: false}; // disable CORS for this request\n//   }\n//   callback(null, corsOptions); // callback expects two parameters: error and options\n// };\n@ServerSettings({\n  rootDir,\n  acceptMimes: [\"application/json\"],\n  port: process.env.WEB_PORT || 8080,\n  env: process.env.NODE_ENV || \"development\",\n  httpsPort: process.env.HTTPS_PORT || false,\n  logger: {\n    debug: true, // process.env.NODE_ENV !== \"production\",\n    logRequest: true,\n    logStart: true,\n    logEnd: true,\n    // requestFields: [\"reqId\", \"method\", \"url\", \"headers\", \"body\", \"query\", \"params\", \"duration\"],\n  },\n  componentsScan: [`${rootDir}/protocols/*.ts`, `${rootDir}/models/*.ts`, `${rootDir}/services/**/*.ts`, `${rootDir}/middlewares/*.ts`],\n  mount: {\n    \"/api/v1\": [RestaurantController, UserController, TransactionController],\n  },\n  exclude: [\"**/*.spec.ts\"],\n  multer: {\n    dest: `${superRootDir}/storage/tmp`,\n    limits: {\n      // fileSize: 1e7,\n    },\n  },\n})\nexport class Server extends ServerLoader {\n  $beforeRoutesInit() {\n    this.use(cors())\n      .use(userAgent.express())\n      .use(GlobalAcceptMimesMiddleware)\n      .use(cookieParser())\n      .use(compress({}))\n      .use(methodOverride())\n      .use(\n        bodyParser.json({\n          // ==> Reuse the json parser\n          verify: (req, res, buff) => {\n            (req as any).rawBody = buff; // ==> Save the body buff to rawBody to be mapped with @Req(\"rawBody\")\n          },\n        })\n      )\n      .use(\n        bodyParser.urlencoded({\n          extended: true,\n        })\n      );\n\n    return null;\n  }\n}\n"]}