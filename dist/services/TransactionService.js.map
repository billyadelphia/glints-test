{"version":3,"file":"TransactionService.js","sourceRoot":"","sources":["../../src/services/TransactionService.ts"],"names":[],"mappings":";;;AAAA,yCAAqC;AAErC,yCAAkC;AAElC,uEAAgE;AAChE,mDAA4C;AAC5C,qDAA8C;AAC9C,6DAAsD;AACtD,yCAA0C;AAG1C,IAAqB,kBAAkB,GAAvC,MAAqB,kBAAkB;IAC/B,GAAG,CAAC,KAAe;;YACvB,MAAM,KAAK,GAAG,MAAM,oBAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC5D,MAAM,IAAI,GAAG,MAAM,wBAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACzD,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,EAAE;gBACV,MAAM,IAAI,2BAAe,CAAC,uBAAuB,CAAC,CAAC;aACpD;YACD,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,2BAAe,CAAC,iBAAiB,CAAC,CAAC;aAC9C;YAED,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,2BAAe,CAAC,iBAAiB,CAAC,CAAC;aAC9C;YAED,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,EAAE;gBACjC,MAAM,IAAI,2BAAe,CAAC,uDAAuD,CAAC,CAAC;aACpF;YAED,OAAO,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAO,CAAC,EAAE,EAAE;gBAC7C,MAAM,mBAAmB,GAAG,IAAI,6BAAmB,EAAE,CAAC;gBACtD,mBAAmB,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;gBAC1C,mBAAmB,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7C,mBAAmB,CAAC,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;gBAC1D,mBAAmB,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC;gBACnD,MAAM,mBAAmB,CAAC,IAAI,CAAC,EAAC,WAAW,EAAE,CAAC,EAAC,CAAC,CAAC;gBAEjD,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,EAAC,EAAE,EAAE,mBAAmB,CAAC,iBAAiB,EAAE,WAAW,EAAE,CAAC,EAAC,CAAC,CAAC;gBAEjG,OAAO,mBAAmB,CAAC;YAC7B,CAAC,CAAA,CAAC,CAAC;QACL,CAAC;KAAA;CACF,CAAA;AAjCoB,kBAAkB;IADtC,gBAAO,EAAE;GACW,kBAAkB,CAiCtC;kBAjCoB,kBAAkB","sourcesContent":["import {Service} from \"@tsed/common\";\nimport {BuyParam} from \"../controllers/types\";\nimport User from \"../models/User\";\nimport Sequelize, {Op} from \"sequelize\";\nimport UserPurchaseHistory from \"../models/UserPurchaseHistory\";\nimport sequelize from \"../config/sequelize\";\nimport Restaurant from \"../models/Restaurant\";\nimport RestaurantMenu from \"../models/RestaurantMenu\";\nimport {ValidationError} from \"sequelize\";\n\n@Service()\nexport default class TransactionService {\n  async buy(param: BuyParam) {\n    const resto = await Restaurant.findByPk(param.restaurantId);\n    const menu = await RestaurantMenu.findByPk(param.menuId);\n    const user = await User.findByPk(param.userId);\n    if (!resto) {\n      throw new ValidationError(\"Restaurant not found!\");\n    }\n    if (!menu) {\n      throw new ValidationError(\"Menu not found!\");\n    }\n\n    if (!user) {\n      throw new ValidationError(\"User not found!\");\n    }\n\n    if (user.cashBalance < menu.price) {\n      throw new ValidationError(\"User cash balance is not enough for this transaction!\");\n    }\n\n    return await sequelize.transaction(async (t) => {\n      const userPurchaseHistory = new UserPurchaseHistory();\n      userPurchaseHistory.userId = param.userId;\n      userPurchaseHistory.dishName = menu.dishName;\n      userPurchaseHistory.restaurantName = resto.restaurantName;\n      userPurchaseHistory.transactionAmount = menu.price;\n      await userPurchaseHistory.save({transaction: t});\n\n      await user.decrement(\"cashBalance\", {by: userPurchaseHistory.transactionAmount, transaction: t});\n\n      return userPurchaseHistory;\n    });\n  }\n}\n"]}