{"version":3,"file":"UserService.js","sourceRoot":"","sources":["../../src/services/UserService.ts"],"names":[],"mappings":";;;AAAA,yCAAqC;AAErC,yCAAkC;AAClC,yCAAwC;AACxC,uEAAgE;AAGhE,IAAqB,WAAW,GAAhC,MAAqB,WAAW;IACxB,IAAI,CAAC,aAA4B;;YACrC,MAAM,YAAY,GAAQ,CAAC,EAAC,KAAK,EAAE,6BAAmB,EAAE,EAAE,EAAE,mBAAmB,EAAE,UAAU,EAAE,EAAE,EAAC,CAAC,CAAC;YAClG,MAAM,eAAe,GAAU,CAAC,IAAI,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;YAC7D,MAAM,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,mBAAmB,CAAC,CAAC;YAC/E,MAAM,SAAS,GAAQ,EAAE,CAAC;YAC1B,MAAM,SAAS,GAAQ,EAAE,CAAC;YAC1B,IAAI,KAAK,GAAkB,IAAI,CAAC;YAChC,IAAI,aAAa,CAAC,kBAAkB,EAAE;gBACpC,IAAI,aAAa,CAAC,kBAAkB,CAAC,IAAI,EAAE;oBACzC,YAAY,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;wBACvD,KAAK,EAAE,EAAC,SAAS,EAAE,EAAC,CAAC,cAAE,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAC,EAAC;qBAC3H,CAAC,CAAC;iBACJ;gBACD,IAAI,aAAa,CAAC,kBAAkB,CAAC,KAAK,EAAE;oBAC1C,eAAe,CAAC,IAAI,CAAC,CAAC,mBAAS,CAAC,OAAO,CAAC,0CAA0C,CAAC,EAAE,wBAAwB,CAAC,CAAC,CAAC;oBAChH,SAAS,CAAC,IAAI,CAAC,CAAC,mBAAS,CAAC,GAAG,CAAC,wBAAwB,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;oBAClE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC1B,KAAK,GAAG,aAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC;iBAChD;aACF;YACD,IAAI,UAAU,GAAG,EAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,eAAe,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC;YACxF,IAAI,SAAS,CAAC,MAAM,EAAE;gBACpB,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;aAC5D;YACD,IAAI,KAAK,EAAE;gBACT,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC;aAClE;YACD,yCAAyC;YAEzC,OAAO,MAAM,cAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACxC,CAAC;KAAA;IAEK,SAAS,CAAC,kBAAsC;;YACpD,MAAM,YAAY,GAAU,CAAC,EAAC,KAAK,EAAE,6BAAmB,EAAE,EAAE,EAAE,mBAAmB,EAAC,CAAC,CAAC;YACpF,MAAM,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,mBAAmB,CAAC,CAAC;YAC/E,IAAI,kBAAkB,CAAC,IAAI,EAAE;gBAC3B,YAAY,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBACvD,KAAK,EAAE,EAAC,SAAS,EAAE,EAAC,CAAC,cAAE,CAAC,OAAO,CAAC,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAC,EAAC;iBAC/F,CAAC,CAAC;aACJ;YACD,IAAI,WAAW,GAAG,EAAE,CAAC;YACrB,IAAI,kBAAkB,CAAC,QAAQ,EAAE;gBAC/B,WAAW,GAAG,mBAAS,CAAC,OAAO,CAC7B,4CAA4C,kBAAkB,CAAC,QAAQ,IAAI,kBAAkB,CAAC,kBAAkB,EAAE,CACnH,CAAC;aACH;YACD,MAAM,SAAS,GAAG,EAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,SAAS,CAAC,EAAC,CAAC;YACnF,uCAAuC;YACvC,MAAM,KAAK,GAAG,MAAM,cAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAE1C,OAAO,KAAK,CAAC,MAAM,CAAC;QACtB,CAAC;KAAA;CACF,CAAA;AArDoB,WAAW;IAD/B,gBAAO,EAAE;GACW,WAAW,CAqD/B;kBArDoB,WAAW","sourcesContent":["import {Service} from \"@tsed/common\";\nimport {ListParamUser, ListParamTotalUser} from \"../controllers/types\";\nimport User from \"../models/User\";\nimport Sequelize, {Op} from \"sequelize\";\nimport UserPurchaseHistory from \"../models/UserPurchaseHistory\";\n\n@Service()\nexport default class UserService {\n  async list(listParamUser: ListParamUser) {\n    const includeQuery: any = [{model: UserPurchaseHistory, as: \"purchaseHistories\", attributes: []}];\n    const attributesQuery: any[] = [\"id\", \"cashBalance\", \"name\"];\n    const index = includeQuery.findIndex((q: any) => q.as === \"purchaseHistories\");\n    const userOrder: any = [];\n    const userGroup: any = [];\n    let limit: null | number = null;\n    if (listParamUser.byTotalTransaction) {\n      if (listParamUser.byTotalTransaction.date) {\n        includeQuery[index] = Object.assign(includeQuery[index], {\n          where: {createdAt: {[Op.between]: [listParamUser.byTotalTransaction.date.from, listParamUser.byTotalTransaction.date.to]}},\n        });\n      }\n      if (listParamUser.byTotalTransaction.limit) {\n        attributesQuery.push([Sequelize.literal(`SUM(purchaseHistories.transactionAmount)`), \"totalTransactionAmount\"]);\n        userOrder.push([Sequelize.col(\"totalTransactionAmount\"), \"DESC\"]);\n        userGroup.push(\"User.id\");\n        limit = listParamUser.byTotalTransaction.limit;\n      }\n    }\n    let finalQuery = {include: includeQuery, attributes: attributesQuery, order: userOrder};\n    if (userGroup.length) {\n      finalQuery = Object.assign(finalQuery, {group: userGroup});\n    }\n    if (limit) {\n      finalQuery = Object.assign(finalQuery, {limit, subQuery: false});\n    }\n    // console.log(\"finalQuery\", finalQuery);\n\n    return await User.findAll(finalQuery);\n  }\n\n  async totalUser(listParamTotalUser: ListParamTotalUser) {\n    const includeQuery: any[] = [{model: UserPurchaseHistory, as: \"purchaseHistories\"}];\n    const index = includeQuery.findIndex((q: any) => q.as === \"purchaseHistories\");\n    if (listParamTotalUser.date) {\n      includeQuery[index] = Object.assign(includeQuery[index], {\n        where: {createdAt: {[Op.between]: [listParamTotalUser.date.from, listParamTotalUser.date.to]}},\n      });\n    }\n    let havingQuery = {};\n    if (listParamTotalUser.operator) {\n      havingQuery = Sequelize.literal(\n        `SUM(purchaseHistories.transactionAmount) ${listParamTotalUser.operator} ${listParamTotalUser.valueOfTransaction}`\n      );\n    }\n    const lastQuery = {include: includeQuery, having: havingQuery, group: [\"User.id\"]};\n    // console.log(\"lastQuery\", lastQuery);\n    const count = await User.count(lastQuery);\n\n    return count.length;\n  }\n}\n"]}