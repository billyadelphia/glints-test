{"version":3,"file":"RestaurantService.js","sourceRoot":"","sources":["../../src/services/RestaurantService.ts"],"names":[],"mappings":"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","sourcesContent":["import {Service} from \"@tsed/common\";\nimport Restaurant from \"../models/Restaurant\";\nimport {ListParam, PopularRestaurantParam} from \"../controllers/types\";\nimport RestaurantOpeningHour from \"../models/RestaurantOpeningHour\";\nimport RestaurantMenu from \"../models/RestaurantMenu\";\nimport Sequelize, {Op} from \"sequelize\";\nimport UserPurchaseHistory from \"../models/UserPurchaseHistory\";\n\n@Service()\nexport default class RestaurantService {\n  async list(listParam: ListParam): Promise<Restaurant[]> {\n    let query = {};\n    if (listParam.byTime) {\n      if (listParam.byTime.day) {\n        query = Object.assign(query, {day: listParam.byTime.day});\n      }\n      if (listParam.byTime.open) {\n        query = Object.assign(query, {\n          from: {\n            [Op.between]: [\n              listParam.byTime.open.from ? listParam.byTime.open.from : \"00:00\",\n              listParam.byTime.open.to ? listParam.byTime.open.to : \"23:59\",\n            ],\n          },\n        });\n      }\n      if (listParam.byTime.closed) {\n        query = Object.assign(query, {\n          to: {\n            [Op.between]: [\n              listParam.byTime.closed.from ? listParam.byTime.closed.from : \"00:00\",\n              listParam.byTime.closed.to ? listParam.byTime.closed.to : \"23:59\",\n            ],\n          },\n        });\n      }\n    }\n    const restoAttribute: any[] = [\"id\", \"cashBalance\", \"restaurantName\"];\n    const openingHourAttribute: any = [];\n    if (listParam.byHours && listParam.byHours.by === \"day\") {\n      query = Object.assign(query, {\n        [Op.and]: Sequelize.literal(\n          `(TIMESTAMPDIFF(MINUTE, openingHours.from, openingHours.to + INTERVAL (CASE WHEN openingHours.to < openingHours.from THEN 1 ELSE 0 END) DAY) / 60) ${listParam.byHours.operator} ${listParam.byHours.hours}`\n        ),\n      });\n      openingHourAttribute.push([\n        Sequelize.literal(\n          `TIMESTAMPDIFF(MINUTE, openingHours.from, openingHours.to + INTERVAL (CASE WHEN openingHours.to < openingHours.from THEN 1 ELSE 0 END) DAY) / 60`\n        ),\n        \"hoursByDay\",\n      ]);\n      openingHourAttribute.push(\"day\");\n      openingHourAttribute.push(\"from\");\n      openingHourAttribute.push(\"to\");\n    }\n    let restaurantQuery = {};\n    const restaurantGroup = [];\n    if (listParam.byHours && listParam.byHours.by === \"week\") {\n      restaurantQuery = Object.assign(restaurantQuery, {\n        [Op.and]: Sequelize.literal(\n          `SUM(TIMESTAMPDIFF( MINUTE, openingHours.FROM, openingHours.TO + INTERVAL ( CASE WHEN openingHours.TO < openingHours.FROM THEN 1 ELSE 0 END ) DAY ) / 60) ${listParam.byHours.operator} ${listParam.byHours.hours}`\n        ),\n      });\n      restaurantGroup.push(\"Restaurant.id\");\n      restoAttribute.push([\n        Sequelize.literal(\n          `SUM(TIMESTAMPDIFF( MINUTE, openingHours.FROM, openingHours.TO + INTERVAL ( CASE WHEN openingHours.TO < openingHours.FROM THEN 1 ELSE 0 END ) DAY ) / 60)`\n        ),\n        \"hoursByWeek\",\n      ]);\n    }\n    const includeQuery: any = [];\n    if (listParam.byDishes) {\n      let includeMenu = {\n        model: RestaurantMenu,\n        as: \"menus\",\n        // where: {},\n        // attributes: openingHourAttribute,\n      };\n\n      if (listParam.byDishes.price) {\n        includeMenu = Object.assign(includeMenu, {\n          where: {\n            price: {\n              [Op.between]: [\n                listParam.byDishes.price.from ? listParam.byDishes.price.from : 0,\n                listParam.byDishes.price.to ? listParam.byDishes.price.to : await RestaurantMenu.max(\"price\"),\n              ],\n            },\n          },\n          attributes: [\"dishName\", \"price\"],\n        });\n      }\n      if (listParam.byDishes.operator && listParam.byDishes.number) {\n        restaurantQuery = Object.assign(restaurantQuery, {\n          [Op.and]: Sequelize.literal(`COUNT(menus.id) ${listParam.byDishes.operator} ${listParam.byDishes.number}`),\n        });\n        restaurantGroup.push(\"Restaurant.id\");\n        restaurantGroup.push(\"menus.id\");\n      }\n      includeQuery.push(includeMenu);\n    }\n\n    let whereQueryRestaurant = {};\n    if (listParam.byName) {\n      if (listParam.byName.restaurantName) {\n        whereQueryRestaurant = Object.assign(whereQueryRestaurant, {\n          where: {restaurantName: {[Op.like]: `%${listParam.byName.restaurantName}%`}},\n        });\n      }\n      if (listParam.byName.dishesName) {\n        if (!includeQuery.find((q: any) => q.as === \"menus\")) {\n          includeQuery.push({\n            model: RestaurantMenu,\n            as: \"menus\",\n          });\n        }\n        const index1 = includeQuery.findIndex((q: any) => q.as === \"menus\");\n\n        includeQuery[index1] = Object.assign(includeQuery[index1], {where: {dishName: {[Op.like]: `%${listParam.byName.dishesName}%`}}});\n      }\n    }\n\n    let finalQuery = {\n      attributes: restoAttribute,\n      having: restaurantQuery,\n      include: [\n        {\n          model: RestaurantOpeningHour,\n          as: \"openingHours\",\n          where: query,\n          attributes: openingHourAttribute,\n        },\n      ],\n    };\n    finalQuery = Object.assign(finalQuery, whereQueryRestaurant);\n    if (restaurantGroup.length) {\n      finalQuery = Object.assign(finalQuery, {group: restaurantGroup});\n    }\n    if (includeQuery.length) {\n      for (const query2 of includeQuery) {\n        finalQuery.include.push(query2);\n      }\n    }\n    const resto = await Restaurant.findAll(finalQuery);\n\n    return resto;\n  }\n\n  async popularRestaurant(param: PopularRestaurantParam): Promise<Restaurant[]> {\n    let havingQuery = {};\n    const groupQuery = [\"Restaurant.id\"];\n    let orderQuery: any[] | null = null;\n    if (param.by === \"numberOfTransaction\") {\n      havingQuery = Object.assign(havingQuery, {\n        [Op.and]: Sequelize.literal(`COUNT(transactions.id)`),\n      });\n      orderQuery = [[Sequelize.col(\"numberOfTransaction\"), \"DESC\"]];\n    }\n\n    if (param.by === \"dolarValue\") {\n      orderQuery = [[\"cashBalance\", \"DESC\"]];\n    }\n\n    let finalQuery: any = {\n      attributes: {include: [[Sequelize.literal(`COUNT(transactions.id)`), \"numberOfTransaction\"]]},\n      include: [{model: UserPurchaseHistory, as: \"transactions\", attributes: []}],\n    };\n    finalQuery = Object.assign(finalQuery, {having: havingQuery});\n    if (groupQuery.length) {\n      finalQuery = Object.assign(finalQuery, {group: groupQuery});\n    }\n    if (orderQuery) {\n      finalQuery = Object.assign(finalQuery, {order: orderQuery});\n    }\n\n    return await Restaurant.findAll(finalQuery);\n  }\n\n  // async listByHours(listParam: ListByHours): Promise<Restaurant[]> {\n  //   // let query = {};\n  //   // if (listParam.operator) {\n  //   //    query = Object.assign(query, {day: listParam.operator});\n  //   // }\n  //   const resto = await Restaurant.findAll({\n  //     include: [\n  //       {\n  //         model: RestaurantOpeningHour,\n  //         as: \"openingHours\",\n  //         attributes: {include: [[, \"hours\"]]},\n  //         // where: query,\n  //       },\n  //     ],\n  //   });\n\n  //   return resto;\n  // }\n}\n"]}